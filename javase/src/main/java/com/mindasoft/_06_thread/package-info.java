/**
 *
 * 人们谈论并发，一般关注的是：多个线程操作相同的资源，如何保证线程安全，如何合理使用资源
 * 人们谈论高并发，一般关注的是：如何让服务同时处理很多请求，如何提高程序性能
 *
 * 当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同
 * 步或协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。
 *
 * 线程安全性主要体现在三个⽅⾯
 * 1. 原子性：提供了互斥访问，同一时刻只有一个线程来对它进行操作
 * 2. 可见性：一个线程对主内存的修改可以及时地被其他线程观察到
 * 3. 有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排的存在，该观察结果一般杂乱无序
 *
 *
 * synchronized、 Lock、 Atomic 的对⽐
 *   1. synchronized：
 *   a) 不可中断搀
 *   b) 适合竞争不激烈场景下使用，在竞争激烈的场景下，性能下降会比较严重
 *   c) 可读性好
 *   2. Lock：
 *   a) 可中断搀（只需要调用 Lock 的 unlock 方法即可中断）
 *   b) 多样化同步
 *   c) 竞争激烈时能维持常态
 *   3. Atomic
 *   a) 竞争时能维持常态
 *   b) 比 Lock 性能好
 *   c) 只能同步一个值
 *
 *
 * @author: min
 * @date: 2019/4/10 10:46
 * @version: 1.0.0
 */
package com.mindasoft._06_thread;